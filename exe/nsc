#!/usr/bin/env ruby
require 'gli'
require "nexpose-security-console"
require 'progress_bar'
require 'csv'


include GLI::App
include NexposeSecurityConsole

program_desc 'CLI to interface with Nexpose Security Console'
version NexposeSecurityConsole::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Manage sites'
arg_name 'Describe arguments to sites here'
command :sites do |c|
  c.action do |global_options,options,args|

    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "sites command ran"
  end
end

desc 'Verify connection to the server'
command [:connect, :login] do |c|
  c.flag [:u, :username], arg_name: 'USERNAME', default_value: ENV['NEXPOSE_USER']
  c.flag [:p, :password], arg_name: 'PASSWORD', default_value: ENV['NEXPOSE_PASSWORD']  
  c.flag [:s, :server], arg_name: 'SERVER', default_value: ENV['NEXPOSE_HOST']
  c.flag [:port], arg_name: 'PORT', default_value: 3780, type: Integer

  c.action do |global_options,options,args|
    username = options[:username] 
    password = options[:password]
    server = options[:server]
    port = options[:port]

    nsc = NexposeSecurityConsole.connection
    puts "Success" if nsc.login
    nsc.logout
  end
end


desc 'Manage asset groups'
command :groups do |c|
  c.desc 'List asset groups'
  c.command :list do |list|
    list.action do |global_options,options,args|
      puts "list asset groups"
    end
  end
  c.default_command :list
end

desc 'Bulk delete assets with unknown OS' 
command :bulk_delete do |c|
  c.action do |global_options, options, args|
    nsc = NexposeSecurityConsole.login
    nsc.login
    puts 'Retrieving all assets with unknown OS'
    puts 'This may take a while. Be patient ...'

    # group_name = 'Unknown OS'
    # query = %Q(
    #   select asset_id from dim_asset_group_asset  daga
    #   join dim_asset_group dag using(asset_group_id)
    #   where dag.name = '#{group_name}'
    # )
    #
    # puts query
    # # assets = nsc.filter(Nexpose::Search::Field::OS, Nexpose::Search::Operator::IS_EMPTY, '')
    # puts "Create the report"
    # report_config = Nexpose::AdhocReportConfig.new(nil, 'sql')
    # report_config.add_filter('version', '2.2.0')
    # report_config.add_filter('query', query)
    # report_output = report_config.generate(nsc)
    #
    # devices = CSV.parse(report_output.chomp, { :headers => :first_row })
    # puts total = devices.count
    # bar = ProgressBar.new(total, :counter, :percentage, :eta)
    # devices.each_with_index do |device , index|
    #   id = device["asset_id"].to_i
    #   nsc.delete_device(id)
    #   bar.increment!
    dag = nsc.asset_groups.find {|group| group.name == 'Unknown OS' }
    group = Nexpose::AssetGroup.load(nsc, dag.id)  
    total = group.assets.count
    bar = ProgressBar.new(total, :counter, :percentage, :eta)
    group.assets.each_with_index do |a,i| 
      nsc.delete_asset(a.id)      
      bar.increment!
    end

    nsc.logout
  end
end



desc 'Manage assets'
arg_name 'Describe arguments to assets here'
command :assets do |c|
  c.action do |global_options,options,args|
    puts "assets command ran"
  end
end

desc 'Manage reports'
arg_name 'Describe arguments to reports here'
command :reports do |c|
  c.action do |global_options,options,args|
    puts "reports command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
